{
    "aluno": [
        {
            "id": 1,
            "nome": "Vinicius",
            "login": "a",
            "senha": "ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb",
            "idade": "12",
            "trilha_atual": 1,
            "modulos_concluidos": [],
            "projetos_concluidos": [],
            "desafios_concluidos": [],
            "notas": {
                "1": 100.0
            }
        },
        {
            "id": 2,
            "nome": "b",
            "login": "b",
            "senha": "3e23e8160039594a33894f6564e1b1348bbd7a0088d42c4acb73eeaed59c009d",
            "idade": "67",
            "trilha_atual": 1,
            "modulos_concluidos": [
                1
            ],
            "projetos_concluidos": [],
            "desafios_concluidos": [],
            "notas": {
                "1": 100.0
            }
        },
        {
            "id": 3,
            "nome": "william lixo",
            "login": "will",
            "senha": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
            "idade": "26",
            "trilha_atual": 1,
            "modulos_concluidos": [
                1,
                2
            ],
            "projetos_concluidos": [],
            "desafios_concluidos": [],
            "notas": {
                "1": 100.0,
                "2": 100.0
            }
        },
        {
            "id": 4,
            "nome": "asdasd",
            "login": "d",
            "senha": "18ac3e7343f016890c510e93f935261169d9e3f565436429830faf0934f4f8e4",
            "idade": "33",
            "trilha_atual": 1,
            "modulos_concluidos": [
                1,
                2
            ],
            "projetos_concluidos": [],
            "desafios_concluidos": [],
            "notas": {
                "1": 100.0,
                "2": 100.0
            }
        }
    ],
    "trilhas": [
        {
            "id": 1,
            "nome": "Fundamentos de Python",
            "modulos": [
                {
                    "id": 1,
                    "nome": "Variáveis e Tipos",
                    "objetivo": "Entender variáveis, tipos primitivos e operações básicas.",
                    "topicos": [
                        "Declaração de variáveis",
                        "int, float, str, bool",
                        "Operadores aritméticos",
                        "Interpolação de strings"
                    ],
                    "desafios": [
                        "Calculadora simples",
                        "Conversor de temperatura"
                    ],
                    "conteudo": "Aprenda como armazenar valores em variáveis e manipular tipos básicos em Python.",
                    "questoes": [
                        {
                            "pergunta": "Qual o tipo de dado de 3.14 em Python?",
                            "alternativas": [
                                "A) int",
                                "B) float",
                                "C) str",
                                "D) bool"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "Como se declara uma variável?",
                            "alternativas": [
                                "A) var x = 5",
                                "B) x := 5",
                                "C) x = 5",
                                "D) int x = 5"
                            ],
                            "resposta": "C"
                        }
                    ]
                },
                {
                    "id": 2,
                    "nome": "Controle de Fluxo",
                    "objetivo": "Usar condicionais e laços para controlar o fluxo do programa.",
                    "topicos": [
                        "if, elif, else",
                        "while e for",
                        "range()",
                        "break e continue"
                    ],
                    "desafios": [
                        "Jogo de adivinhação",
                        "Tabuada com for"
                    ],
                    "conteudo": "Descubra como tomar decisões no código e repetir ações com loops.",
                    "questoes": [
                        {
                            "pergunta": "Qual saída será impressa por:\n\n```\nif 3 > 2:\n    print('Maior')\nelse:\n    print('Menor')\n```",
                            "alternativas": [
                                "A) Maior",
                                "B) Menor",
                                "C) Erro de sintaxe",
                                "D) Nada"
                            ],
                            "resposta": "A"
                        },
                        {
                            "pergunta": "Qual o resultado de:\n\n```\nfor i in range(1,5):\n    if i == 3:\n        break\n    print(i)\n```",
                            "alternativas": [
                                "A) 1 2 3 4",
                                "B) 1 2",
                                "C) 1 2 3",
                                "D) Erro em tempo de execução"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "Para pular a iteração atual em um laço, usamos:",
                            "alternativas": [
                                "A) stop",
                                "B) continue",
                                "C) pass",
                                "D) skip"
                            ],
                            "resposta": "B"
                        }
                    ]
                },
                {
                    "id": 3,
                    "nome": "Estruturas de Dados",
                    "objetivo": "Trabalhar com coleções nativas do Python.",
                    "topicos": [
                        "Listas e métodos",
                        "Tuplas e sets",
                        "Dicionários",
                        "Compreensões de lista"
                    ],
                    "desafios": [
                        "Gerenciador de tarefas",
                        "Contador de palavras"
                    ],
                    "conteudo": "Aprenda a armazenar grupos de itens e iterar sobre eles.",
                    "questoes": [
                        {
                            "pergunta": "Qual método adiciona um elemento ao fim de uma lista?",
                            "alternativas": [
                                "A) list.add()",
                                "B) list.insert()",
                                "C) list.append()",
                                "D) list.push()"
                            ],
                            "resposta": "C"
                        },
                        {
                            "pergunta": "Como você acessa o valor de chave 'nome' em um dicionário `d`?",
                            "alternativas": [
                                "A) d.nome",
                                "B) d['nome']",
                                "C) d.get(1)",
                                "D) d[name]"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "Qual dessas é uma tupla válida?",
                            "alternativas": [
                                "A) (1, 2, 3)",
                                "B) [1, 2, 3]",
                                "C) {1, 2, 3}",
                                "D) <1, 2, 3>"
                            ],
                            "resposta": "A"
                        }
                    ]
                },
                {
                    "id": 4,
                    "nome": "Funções e Módulos",
                    "objetivo": "Organizar o código em funções reutilizáveis.",
                    "topicos": [
                        "Definindo funções (def)",
                        "Parâmetros e retorno",
                        "*args e **kwargs",
                        "Importando módulos"
                    ],
                    "projetos": [
                        "Calculadora com menu interativo"
                    ],
                    "conteudo": "Saiba como criar e reutilizar blocos de código em funções.",
                    "questoes": [
                        {
                            "pergunta": "Como se define uma função em Python?",
                            "alternativas": [
                                "A) function foo():",
                                "B) def foo():",
                                "C) func foo():",
                                "D) define foo():"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "Qual a sintaxe correta para importar apenas `sqrt` do módulo `math`?",
                            "alternativas": [
                                "A) import math.sqrt",
                                "B) from math import sqrt",
                                "C) include math.sqrt",
                                "D) using math import sqrt"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "O que `*args` faz numa definição de função?",
                            "alternativas": [
                                "A) Argumentos nomeados",
                                "B) Lista de tuplas",
                                "C) Recebe quantidade variável de argumentos posicionais",
                                "D) Recebe um dicionário"
                            ],
                            "resposta": "C"
                        }
                    ]
                },
                {
                    "id": 5,
                    "nome": "Manipulação de Arquivos",
                    "objetivo": "Ler e escrever arquivos no sistema de arquivos.",
                    "topicos": [
                        "open() com modos r, w, a",
                        "with para gerenciamento de contexto",
                        "Leitura e escrita de linhas"
                    ],
                    "projetos": [
                        "Sistema de cadastro em .txt"
                    ],
                    "conteudo": "Aprenda a persistir dados em arquivos de texto usando Python.",
                    "questoes": [
                        {
                            "pergunta": "Qual modo abre um arquivo para anexar texto sem apagar o anterior?",
                            "alternativas": [
                                "A) 'r'",
                                "B) 'w'",
                                "C) 'a'",
                                "D) 'x'"
                            ],
                            "resposta": "C"
                        },
                        {
                            "pergunta": "Qual a vantagem de usar `with open(...) as f:`?",
                            "alternativas": [
                                "A) Velocidade",
                                "B) Tratamento automático de fechamento do arquivo",
                                "C) Permite múltiplos arquivos",
                                "D) Faz backup automático"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "Para ler todo o conteúdo de um arquivo em uma string usamos:",
                            "alternativas": [
                                "A) f.read()",
                                "B) f.readlines()",
                                "C) f.readline()",
                                "D) f.open()"
                            ],
                            "resposta": "A"
                        }
                    ]
                },
                {
                    "id": 6,
                    "nome": "Tratamento de Erros",
                    "objetivo": "Tornar o código mais robusto com exceções.",
                    "topicos": [
                        "try, except, finally",
                        "Exceções personalizadas"
                    ],
                    "desafios": [
                        "Validador de entrada"
                    ],
                    "conteudo": "Entenda como capturar e tratar erros para evitar crashes.",
                    "questoes": [
                        {
                            "pergunta": "Qual bloco captura exceções em Python?",
                            "alternativas": [
                                "A) try",
                                "B) except",
                                "C) finally",
                                "D) catch"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "Onde você coloca o código que sempre deve ser executado, ocorra exceção ou não?",
                            "alternativas": [
                                "A) try",
                                "B) except",
                                "C) finally",
                                "D) else"
                            ],
                            "resposta": "C"
                        },
                        {
                            "pergunta": "Para lançar uma exceção personalizada, usamos:",
                            "alternativas": [
                                "A) throw MyError()",
                                "B) raise MyError()",
                                "C) error MyError()",
                                "D) exception MyError()"
                            ],
                            "resposta": "B"
                        }
                    ]
                },
                {
                    "id": 7,
                    "nome": "Projeto Final de Python",
                    "objetivo": "Aplicar tudo em um pequeno projeto real.",
                    "topicos": [],
                    "projetos": [
                        "Mini-app de notas com JSON"
                    ],
                    "conteudo": "Desenvolva uma aplicação completa que armazena dados em JSON.",
                    "questoes": [
                        {
                            "pergunta": "Que método do `json` converte objeto Python em string JSON?",
                            "alternativas": [
                                "A) json.parse()",
                                "B) json.dumps()",
                                "C) json.to_json()",
                                "D) json.stringify()"
                            ],
                            "resposta": "B"
                        },
                        {
                            "pergunta": "Para ler um JSON de um arquivo e já obter dicionário usamos:",
                            "alternativas": [
                                "A) json.load(f)",
                                "B) json.read(f)",
                                "C) json.parse(f)",
                                "D) json.open(f)"
                            ],
                            "resposta": "A"
                        },
                        {
                            "pergunta": "Em um mini-app de notas, qual estrutura é ideal para armazenar cada nota com identificador?",
                            "alternativas": [
                                "A) Lista de listas",
                                "B) Dicionário de dicionários",
                                "C) Tupla de tuplas",
                                "D) Conjunto de strings"
                            ],
                            "resposta": "B"
                        }
                    ]
                }
            ]
        }
    ]
}

